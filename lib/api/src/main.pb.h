// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: main.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_main_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_main_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_main_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_main_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_main_2eproto;
class ClientRegistrationReq;
struct ClientRegistrationReqDefaultTypeInternal;
extern ClientRegistrationReqDefaultTypeInternal _ClientRegistrationReq_default_instance_;
class ClientRegistrationResp;
struct ClientRegistrationRespDefaultTypeInternal;
extern ClientRegistrationRespDefaultTypeInternal _ClientRegistrationResp_default_instance_;
class EstablishmentData;
struct EstablishmentDataDefaultTypeInternal;
extern EstablishmentDataDefaultTypeInternal _EstablishmentData_default_instance_;
class EstablishmentData_DishesEntry_DoNotUse;
struct EstablishmentData_DishesEntry_DoNotUseDefaultTypeInternal;
extern EstablishmentData_DishesEntry_DoNotUseDefaultTypeInternal _EstablishmentData_DishesEntry_DoNotUse_default_instance_;
class EstimationReq;
struct EstimationReqDefaultTypeInternal;
extern EstimationReqDefaultTypeInternal _EstimationReq_default_instance_;
class EstimatonResp;
struct EstimatonRespDefaultTypeInternal;
extern EstimatonRespDefaultTypeInternal _EstimatonResp_default_instance_;
class SubscriptionEstimationsReq;
struct SubscriptionEstimationsReqDefaultTypeInternal;
extern SubscriptionEstimationsReqDefaultTypeInternal _SubscriptionEstimationsReq_default_instance_;
class SubscriptionEstimationsResp;
struct SubscriptionEstimationsRespDefaultTypeInternal;
extern SubscriptionEstimationsRespDefaultTypeInternal _SubscriptionEstimationsResp_default_instance_;
class SubscriptionReq;
struct SubscriptionReqDefaultTypeInternal;
extern SubscriptionReqDefaultTypeInternal _SubscriptionReq_default_instance_;
class SubscriptionResp;
struct SubscriptionRespDefaultTypeInternal;
extern SubscriptionRespDefaultTypeInternal _SubscriptionResp_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google


// ===================================================================


// -------------------------------------------------------------------

class SubscriptionResp final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SubscriptionResp) */ {
 public:
  inline SubscriptionResp() : SubscriptionResp(nullptr) {}
  ~SubscriptionResp() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SubscriptionResp(::google::protobuf::internal::ConstantInitialized);

  inline SubscriptionResp(const SubscriptionResp& from)
      : SubscriptionResp(nullptr, from) {}
  SubscriptionResp(SubscriptionResp&& from) noexcept
    : SubscriptionResp() {
    *this = ::std::move(from);
  }

  inline SubscriptionResp& operator=(const SubscriptionResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscriptionResp& operator=(SubscriptionResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscriptionResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscriptionResp* internal_default_instance() {
    return reinterpret_cast<const SubscriptionResp*>(
               &_SubscriptionResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SubscriptionResp& a, SubscriptionResp& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscriptionResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscriptionResp* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscriptionResp* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscriptionResp>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SubscriptionResp& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SubscriptionResp& from) {
    SubscriptionResp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SubscriptionResp* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "SubscriptionResp";
  }
  protected:
  explicit SubscriptionResp(::google::protobuf::Arena* arena);
  SubscriptionResp(::google::protobuf::Arena* arena, const SubscriptionResp& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 2,
    kOkFieldNumber = 1,
  };
  // optional string reason = 2;
  bool has_reason() const;
  void clear_reason() ;
  const std::string& reason() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_reason(Arg_&& arg, Args_... args);
  std::string* mutable_reason();
  PROTOBUF_NODISCARD std::string* release_reason();
  void set_allocated_reason(std::string* value);

  private:
  const std::string& _internal_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reason(
      const std::string& value);
  std::string* _internal_mutable_reason();

  public:
  // bool ok = 1;
  void clear_ok() ;
  bool ok() const;
  void set_ok(bool value);

  private:
  bool _internal_ok() const;
  void _internal_set_ok(bool value);

  public:
  // @@protoc_insertion_point(class_scope:SubscriptionResp)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      31, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr reason_;
    bool ok_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_main_2eproto;
};// -------------------------------------------------------------------

class SubscriptionReq final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SubscriptionReq) */ {
 public:
  inline SubscriptionReq() : SubscriptionReq(nullptr) {}
  ~SubscriptionReq() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SubscriptionReq(::google::protobuf::internal::ConstantInitialized);

  inline SubscriptionReq(const SubscriptionReq& from)
      : SubscriptionReq(nullptr, from) {}
  SubscriptionReq(SubscriptionReq&& from) noexcept
    : SubscriptionReq() {
    *this = ::std::move(from);
  }

  inline SubscriptionReq& operator=(const SubscriptionReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscriptionReq& operator=(SubscriptionReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscriptionReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscriptionReq* internal_default_instance() {
    return reinterpret_cast<const SubscriptionReq*>(
               &_SubscriptionReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SubscriptionReq& a, SubscriptionReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscriptionReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscriptionReq* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscriptionReq* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscriptionReq>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SubscriptionReq& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SubscriptionReq& from) {
    SubscriptionReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SubscriptionReq* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "SubscriptionReq";
  }
  protected:
  explicit SubscriptionReq(::google::protobuf::Arena* arena);
  SubscriptionReq(::google::protobuf::Arena* arena, const SubscriptionReq& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubscriberEMailFieldNumber = 1,
    kSubscriptionEMailFieldNumber = 2,
  };
  // string subscriber_e_mail = 1;
  void clear_subscriber_e_mail() ;
  const std::string& subscriber_e_mail() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_subscriber_e_mail(Arg_&& arg, Args_... args);
  std::string* mutable_subscriber_e_mail();
  PROTOBUF_NODISCARD std::string* release_subscriber_e_mail();
  void set_allocated_subscriber_e_mail(std::string* value);

  private:
  const std::string& _internal_subscriber_e_mail() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subscriber_e_mail(
      const std::string& value);
  std::string* _internal_mutable_subscriber_e_mail();

  public:
  // string subscription_e_mail = 2;
  void clear_subscription_e_mail() ;
  const std::string& subscription_e_mail() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_subscription_e_mail(Arg_&& arg, Args_... args);
  std::string* mutable_subscription_e_mail();
  PROTOBUF_NODISCARD std::string* release_subscription_e_mail();
  void set_allocated_subscription_e_mail(std::string* value);

  private:
  const std::string& _internal_subscription_e_mail() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subscription_e_mail(
      const std::string& value);
  std::string* _internal_mutable_subscription_e_mail();

  public:
  // @@protoc_insertion_point(class_scope:SubscriptionReq)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      60, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr subscriber_e_mail_;
    ::google::protobuf::internal::ArenaStringPtr subscription_e_mail_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_main_2eproto;
};// -------------------------------------------------------------------

class SubscriptionEstimationsReq final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SubscriptionEstimationsReq) */ {
 public:
  inline SubscriptionEstimationsReq() : SubscriptionEstimationsReq(nullptr) {}
  ~SubscriptionEstimationsReq() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SubscriptionEstimationsReq(::google::protobuf::internal::ConstantInitialized);

  inline SubscriptionEstimationsReq(const SubscriptionEstimationsReq& from)
      : SubscriptionEstimationsReq(nullptr, from) {}
  SubscriptionEstimationsReq(SubscriptionEstimationsReq&& from) noexcept
    : SubscriptionEstimationsReq() {
    *this = ::std::move(from);
  }

  inline SubscriptionEstimationsReq& operator=(const SubscriptionEstimationsReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscriptionEstimationsReq& operator=(SubscriptionEstimationsReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscriptionEstimationsReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscriptionEstimationsReq* internal_default_instance() {
    return reinterpret_cast<const SubscriptionEstimationsReq*>(
               &_SubscriptionEstimationsReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SubscriptionEstimationsReq& a, SubscriptionEstimationsReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscriptionEstimationsReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscriptionEstimationsReq* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscriptionEstimationsReq* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscriptionEstimationsReq>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SubscriptionEstimationsReq& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SubscriptionEstimationsReq& from) {
    SubscriptionEstimationsReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SubscriptionEstimationsReq* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "SubscriptionEstimationsReq";
  }
  protected:
  explicit SubscriptionEstimationsReq(::google::protobuf::Arena* arena);
  SubscriptionEstimationsReq(::google::protobuf::Arena* arena, const SubscriptionEstimationsReq& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubscribtionMailFieldNumber = 1,
  };
  // string subscribtion_mail = 1;
  void clear_subscribtion_mail() ;
  const std::string& subscribtion_mail() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_subscribtion_mail(Arg_&& arg, Args_... args);
  std::string* mutable_subscribtion_mail();
  PROTOBUF_NODISCARD std::string* release_subscribtion_mail();
  void set_allocated_subscribtion_mail(std::string* value);

  private:
  const std::string& _internal_subscribtion_mail() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subscribtion_mail(
      const std::string& value);
  std::string* _internal_mutable_subscribtion_mail();

  public:
  // @@protoc_insertion_point(class_scope:SubscriptionEstimationsReq)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      52, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr subscribtion_mail_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_main_2eproto;
};// -------------------------------------------------------------------

class EstimatonResp final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:EstimatonResp) */ {
 public:
  inline EstimatonResp() : EstimatonResp(nullptr) {}
  ~EstimatonResp() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EstimatonResp(::google::protobuf::internal::ConstantInitialized);

  inline EstimatonResp(const EstimatonResp& from)
      : EstimatonResp(nullptr, from) {}
  EstimatonResp(EstimatonResp&& from) noexcept
    : EstimatonResp() {
    *this = ::std::move(from);
  }

  inline EstimatonResp& operator=(const EstimatonResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline EstimatonResp& operator=(EstimatonResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EstimatonResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const EstimatonResp* internal_default_instance() {
    return reinterpret_cast<const EstimatonResp*>(
               &_EstimatonResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(EstimatonResp& a, EstimatonResp& b) {
    a.Swap(&b);
  }
  inline void Swap(EstimatonResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EstimatonResp* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EstimatonResp* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EstimatonResp>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EstimatonResp& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const EstimatonResp& from) {
    EstimatonResp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(EstimatonResp* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "EstimatonResp";
  }
  protected:
  explicit EstimatonResp(::google::protobuf::Arena* arena);
  EstimatonResp(::google::protobuf::Arena* arena, const EstimatonResp& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 2,
    kOkFieldNumber = 1,
  };
  // optional string reason = 2;
  bool has_reason() const;
  void clear_reason() ;
  const std::string& reason() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_reason(Arg_&& arg, Args_... args);
  std::string* mutable_reason();
  PROTOBUF_NODISCARD std::string* release_reason();
  void set_allocated_reason(std::string* value);

  private:
  const std::string& _internal_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reason(
      const std::string& value);
  std::string* _internal_mutable_reason();

  public:
  // bool ok = 1;
  void clear_ok() ;
  bool ok() const;
  void set_ok(bool value);

  private:
  bool _internal_ok() const;
  void _internal_set_ok(bool value);

  public:
  // @@protoc_insertion_point(class_scope:EstimatonResp)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      28, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr reason_;
    bool ok_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_main_2eproto;
};// -------------------------------------------------------------------

class EstablishmentData_DishesEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          EstablishmentData_DishesEntry_DoNotUse, std::string, ::int32_t,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_INT32> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      EstablishmentData_DishesEntry_DoNotUse, std::string, ::int32_t,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32>;
  EstablishmentData_DishesEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR EstablishmentData_DishesEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit EstablishmentData_DishesEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const EstablishmentData_DishesEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const EstablishmentData_DishesEntry_DoNotUse*>(
        &_EstablishmentData_DishesEntry_DoNotUse_default_instance_);
  }
  static bool ValidateKey(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "EstablishmentData.DishesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  ::google::protobuf::Metadata GetMetadata() const final;
  friend struct ::TableStruct_main_2eproto;
};
// -------------------------------------------------------------------

class ClientRegistrationResp final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ClientRegistrationResp) */ {
 public:
  inline ClientRegistrationResp() : ClientRegistrationResp(nullptr) {}
  ~ClientRegistrationResp() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ClientRegistrationResp(::google::protobuf::internal::ConstantInitialized);

  inline ClientRegistrationResp(const ClientRegistrationResp& from)
      : ClientRegistrationResp(nullptr, from) {}
  ClientRegistrationResp(ClientRegistrationResp&& from) noexcept
    : ClientRegistrationResp() {
    *this = ::std::move(from);
  }

  inline ClientRegistrationResp& operator=(const ClientRegistrationResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientRegistrationResp& operator=(ClientRegistrationResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientRegistrationResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientRegistrationResp* internal_default_instance() {
    return reinterpret_cast<const ClientRegistrationResp*>(
               &_ClientRegistrationResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ClientRegistrationResp& a, ClientRegistrationResp& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientRegistrationResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientRegistrationResp* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientRegistrationResp* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientRegistrationResp>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ClientRegistrationResp& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ClientRegistrationResp& from) {
    ClientRegistrationResp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ClientRegistrationResp* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ClientRegistrationResp";
  }
  protected:
  explicit ClientRegistrationResp(::google::protobuf::Arena* arena);
  ClientRegistrationResp(::google::protobuf::Arena* arena, const ClientRegistrationResp& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 2,
    kOkFieldNumber = 1,
  };
  // optional string reason = 2;
  bool has_reason() const;
  void clear_reason() ;
  const std::string& reason() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_reason(Arg_&& arg, Args_... args);
  std::string* mutable_reason();
  PROTOBUF_NODISCARD std::string* release_reason();
  void set_allocated_reason(std::string* value);

  private:
  const std::string& _internal_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reason(
      const std::string& value);
  std::string* _internal_mutable_reason();

  public:
  // bool ok = 1;
  void clear_ok() ;
  bool ok() const;
  void set_ok(bool value);

  private:
  bool _internal_ok() const;
  void _internal_set_ok(bool value);

  public:
  // @@protoc_insertion_point(class_scope:ClientRegistrationResp)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      37, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr reason_;
    bool ok_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_main_2eproto;
};// -------------------------------------------------------------------

class ClientRegistrationReq final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ClientRegistrationReq) */ {
 public:
  inline ClientRegistrationReq() : ClientRegistrationReq(nullptr) {}
  ~ClientRegistrationReq() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ClientRegistrationReq(::google::protobuf::internal::ConstantInitialized);

  inline ClientRegistrationReq(const ClientRegistrationReq& from)
      : ClientRegistrationReq(nullptr, from) {}
  ClientRegistrationReq(ClientRegistrationReq&& from) noexcept
    : ClientRegistrationReq() {
    *this = ::std::move(from);
  }

  inline ClientRegistrationReq& operator=(const ClientRegistrationReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientRegistrationReq& operator=(ClientRegistrationReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientRegistrationReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientRegistrationReq* internal_default_instance() {
    return reinterpret_cast<const ClientRegistrationReq*>(
               &_ClientRegistrationReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ClientRegistrationReq& a, ClientRegistrationReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientRegistrationReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientRegistrationReq* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientRegistrationReq* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientRegistrationReq>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ClientRegistrationReq& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ClientRegistrationReq& from) {
    ClientRegistrationReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ClientRegistrationReq* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ClientRegistrationReq";
  }
  protected:
  explicit ClientRegistrationReq(::google::protobuf::Arena* arena);
  ClientRegistrationReq(::google::protobuf::Arena* arena, const ClientRegistrationReq& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElectronicMailFieldNumber = 1,
    kNameFieldNumber = 2,
    kSernameFieldNumber = 3,
    kPhoneNumberFieldNumber = 4,
  };
  // string electronic_mail = 1;
  void clear_electronic_mail() ;
  const std::string& electronic_mail() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_electronic_mail(Arg_&& arg, Args_... args);
  std::string* mutable_electronic_mail();
  PROTOBUF_NODISCARD std::string* release_electronic_mail();
  void set_allocated_electronic_mail(std::string* value);

  private:
  const std::string& _internal_electronic_mail() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_electronic_mail(
      const std::string& value);
  std::string* _internal_mutable_electronic_mail();

  public:
  // string name = 2;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string sername = 3;
  void clear_sername() ;
  const std::string& sername() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sername(Arg_&& arg, Args_... args);
  std::string* mutable_sername();
  PROTOBUF_NODISCARD std::string* release_sername();
  void set_allocated_sername(std::string* value);

  private:
  const std::string& _internal_sername() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sername(
      const std::string& value);
  std::string* _internal_mutable_sername();

  public:
  // optional string phone_number = 4;
  bool has_phone_number() const;
  void clear_phone_number() ;
  const std::string& phone_number() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_phone_number(Arg_&& arg, Args_... args);
  std::string* mutable_phone_number();
  PROTOBUF_NODISCARD std::string* release_phone_number();
  void set_allocated_phone_number(std::string* value);

  private:
  const std::string& _internal_phone_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_phone_number(
      const std::string& value);
  std::string* _internal_mutable_phone_number();

  public:
  // @@protoc_insertion_point(class_scope:ClientRegistrationReq)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      68, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr electronic_mail_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr sername_;
    ::google::protobuf::internal::ArenaStringPtr phone_number_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_main_2eproto;
};// -------------------------------------------------------------------

class EstablishmentData final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:EstablishmentData) */ {
 public:
  inline EstablishmentData() : EstablishmentData(nullptr) {}
  ~EstablishmentData() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EstablishmentData(::google::protobuf::internal::ConstantInitialized);

  inline EstablishmentData(const EstablishmentData& from)
      : EstablishmentData(nullptr, from) {}
  EstablishmentData(EstablishmentData&& from) noexcept
    : EstablishmentData() {
    *this = ::std::move(from);
  }

  inline EstablishmentData& operator=(const EstablishmentData& from) {
    CopyFrom(from);
    return *this;
  }
  inline EstablishmentData& operator=(EstablishmentData&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EstablishmentData& default_instance() {
    return *internal_default_instance();
  }
  static inline const EstablishmentData* internal_default_instance() {
    return reinterpret_cast<const EstablishmentData*>(
               &_EstablishmentData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(EstablishmentData& a, EstablishmentData& b) {
    a.Swap(&b);
  }
  inline void Swap(EstablishmentData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EstablishmentData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EstablishmentData* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EstablishmentData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EstablishmentData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const EstablishmentData& from) {
    EstablishmentData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(EstablishmentData* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "EstablishmentData";
  }
  protected:
  explicit EstablishmentData(::google::protobuf::Arena* arena);
  EstablishmentData(::google::protobuf::Arena* arena, const EstablishmentData& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kDishesFieldNumber = 3,
    kNameFieldNumber = 1,
    kAddressFieldNumber = 2,
  };
  // map<string, int32> dishes = 3;
  int dishes_size() const;
  private:
  int _internal_dishes_size() const;

  public:
  void clear_dishes() ;
  const ::google::protobuf::Map<std::string, ::int32_t>& dishes() const;
  ::google::protobuf::Map<std::string, ::int32_t>* mutable_dishes();

  private:
  const ::google::protobuf::Map<std::string, ::int32_t>& _internal_dishes() const;
  ::google::protobuf::Map<std::string, ::int32_t>* _internal_mutable_dishes();

  public:
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string address = 2;
  void clear_address() ;
  const std::string& address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_address(Arg_&& arg, Args_... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* value);

  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(
      const std::string& value);
  std::string* _internal_mutable_address();

  public:
  // @@protoc_insertion_point(class_scope:EstablishmentData)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 3, 1,
      43, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::MapField<EstablishmentData_DishesEntry_DoNotUse, std::string, ::int32_t,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_INT32>
        dishes_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr address_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_main_2eproto;
};// -------------------------------------------------------------------

class SubscriptionEstimationsResp final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SubscriptionEstimationsResp) */ {
 public:
  inline SubscriptionEstimationsResp() : SubscriptionEstimationsResp(nullptr) {}
  ~SubscriptionEstimationsResp() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SubscriptionEstimationsResp(::google::protobuf::internal::ConstantInitialized);

  inline SubscriptionEstimationsResp(const SubscriptionEstimationsResp& from)
      : SubscriptionEstimationsResp(nullptr, from) {}
  SubscriptionEstimationsResp(SubscriptionEstimationsResp&& from) noexcept
    : SubscriptionEstimationsResp() {
    *this = ::std::move(from);
  }

  inline SubscriptionEstimationsResp& operator=(const SubscriptionEstimationsResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscriptionEstimationsResp& operator=(SubscriptionEstimationsResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscriptionEstimationsResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscriptionEstimationsResp* internal_default_instance() {
    return reinterpret_cast<const SubscriptionEstimationsResp*>(
               &_SubscriptionEstimationsResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SubscriptionEstimationsResp& a, SubscriptionEstimationsResp& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscriptionEstimationsResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscriptionEstimationsResp* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscriptionEstimationsResp* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscriptionEstimationsResp>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SubscriptionEstimationsResp& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SubscriptionEstimationsResp& from) {
    SubscriptionEstimationsResp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SubscriptionEstimationsResp* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "SubscriptionEstimationsResp";
  }
  protected:
  explicit SubscriptionEstimationsResp(::google::protobuf::Arena* arena);
  SubscriptionEstimationsResp(::google::protobuf::Arena* arena, const SubscriptionEstimationsResp& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEstimationsFieldNumber = 3,
    kReasonFieldNumber = 2,
    kOkFieldNumber = 1,
  };
  // repeated .EstablishmentData estimations = 3;
  int estimations_size() const;
  private:
  int _internal_estimations_size() const;

  public:
  void clear_estimations() ;
  ::EstablishmentData* mutable_estimations(int index);
  ::google::protobuf::RepeatedPtrField< ::EstablishmentData >*
      mutable_estimations();
  private:
  const ::google::protobuf::RepeatedPtrField<::EstablishmentData>& _internal_estimations() const;
  ::google::protobuf::RepeatedPtrField<::EstablishmentData>* _internal_mutable_estimations();
  public:
  const ::EstablishmentData& estimations(int index) const;
  ::EstablishmentData* add_estimations();
  const ::google::protobuf::RepeatedPtrField< ::EstablishmentData >&
      estimations() const;
  // optional string reason = 2;
  bool has_reason() const;
  void clear_reason() ;
  const std::string& reason() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_reason(Arg_&& arg, Args_... args);
  std::string* mutable_reason();
  PROTOBUF_NODISCARD std::string* release_reason();
  void set_allocated_reason(std::string* value);

  private:
  const std::string& _internal_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reason(
      const std::string& value);
  std::string* _internal_mutable_reason();

  public:
  // bool ok = 1;
  void clear_ok() ;
  bool ok() const;
  void set_ok(bool value);

  private:
  bool _internal_ok() const;
  void _internal_set_ok(bool value);

  public:
  // @@protoc_insertion_point(class_scope:SubscriptionEstimationsResp)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      42, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::EstablishmentData > estimations_;
    ::google::protobuf::internal::ArenaStringPtr reason_;
    bool ok_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_main_2eproto;
};// -------------------------------------------------------------------

class EstimationReq final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:EstimationReq) */ {
 public:
  inline EstimationReq() : EstimationReq(nullptr) {}
  ~EstimationReq() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EstimationReq(::google::protobuf::internal::ConstantInitialized);

  inline EstimationReq(const EstimationReq& from)
      : EstimationReq(nullptr, from) {}
  EstimationReq(EstimationReq&& from) noexcept
    : EstimationReq() {
    *this = ::std::move(from);
  }

  inline EstimationReq& operator=(const EstimationReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline EstimationReq& operator=(EstimationReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EstimationReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const EstimationReq* internal_default_instance() {
    return reinterpret_cast<const EstimationReq*>(
               &_EstimationReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(EstimationReq& a, EstimationReq& b) {
    a.Swap(&b);
  }
  inline void Swap(EstimationReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EstimationReq* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EstimationReq* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EstimationReq>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EstimationReq& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const EstimationReq& from) {
    EstimationReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(EstimationReq* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "EstimationReq";
  }
  protected:
  explicit EstimationReq(::google::protobuf::Arena* arena);
  EstimationReq(::google::protobuf::Arena* arena, const EstimationReq& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEMailFieldNumber = 1,
    kEstablishmentFieldNumber = 2,
  };
  // string e_mail = 1;
  void clear_e_mail() ;
  const std::string& e_mail() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_e_mail(Arg_&& arg, Args_... args);
  std::string* mutable_e_mail();
  PROTOBUF_NODISCARD std::string* release_e_mail();
  void set_allocated_e_mail(std::string* value);

  private:
  const std::string& _internal_e_mail() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_e_mail(
      const std::string& value);
  std::string* _internal_mutable_e_mail();

  public:
  // .EstablishmentData establishment = 2;
  bool has_establishment() const;
  void clear_establishment() ;
  const ::EstablishmentData& establishment() const;
  PROTOBUF_NODISCARD ::EstablishmentData* release_establishment();
  ::EstablishmentData* mutable_establishment();
  void set_allocated_establishment(::EstablishmentData* value);
  void unsafe_arena_set_allocated_establishment(::EstablishmentData* value);
  ::EstablishmentData* unsafe_arena_release_establishment();

  private:
  const ::EstablishmentData& _internal_establishment() const;
  ::EstablishmentData* _internal_mutable_establishment();

  public:
  // @@protoc_insertion_point(class_scope:EstimationReq)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      28, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr e_mail_;
    ::EstablishmentData* establishment_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_main_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ClientRegistrationReq

// string electronic_mail = 1;
inline void ClientRegistrationReq::clear_electronic_mail() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.electronic_mail_.ClearToEmpty();
}
inline const std::string& ClientRegistrationReq::electronic_mail() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ClientRegistrationReq.electronic_mail)
  return _internal_electronic_mail();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ClientRegistrationReq::set_electronic_mail(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.electronic_mail_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ClientRegistrationReq.electronic_mail)
}
inline std::string* ClientRegistrationReq::mutable_electronic_mail() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_electronic_mail();
  // @@protoc_insertion_point(field_mutable:ClientRegistrationReq.electronic_mail)
  return _s;
}
inline const std::string& ClientRegistrationReq::_internal_electronic_mail() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.electronic_mail_.Get();
}
inline void ClientRegistrationReq::_internal_set_electronic_mail(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.electronic_mail_.Set(value, GetArena());
}
inline std::string* ClientRegistrationReq::_internal_mutable_electronic_mail() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.electronic_mail_.Mutable( GetArena());
}
inline std::string* ClientRegistrationReq::release_electronic_mail() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ClientRegistrationReq.electronic_mail)
  return _impl_.electronic_mail_.Release();
}
inline void ClientRegistrationReq::set_allocated_electronic_mail(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.electronic_mail_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.electronic_mail_.IsDefault()) {
          _impl_.electronic_mail_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ClientRegistrationReq.electronic_mail)
}

// string name = 2;
inline void ClientRegistrationReq::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ClientRegistrationReq::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ClientRegistrationReq.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ClientRegistrationReq::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ClientRegistrationReq.name)
}
inline std::string* ClientRegistrationReq::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ClientRegistrationReq.name)
  return _s;
}
inline const std::string& ClientRegistrationReq::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void ClientRegistrationReq::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* ClientRegistrationReq::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* ClientRegistrationReq::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ClientRegistrationReq.name)
  return _impl_.name_.Release();
}
inline void ClientRegistrationReq::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ClientRegistrationReq.name)
}

// string sername = 3;
inline void ClientRegistrationReq::clear_sername() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sername_.ClearToEmpty();
}
inline const std::string& ClientRegistrationReq::sername() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ClientRegistrationReq.sername)
  return _internal_sername();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ClientRegistrationReq::set_sername(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sername_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ClientRegistrationReq.sername)
}
inline std::string* ClientRegistrationReq::mutable_sername() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_sername();
  // @@protoc_insertion_point(field_mutable:ClientRegistrationReq.sername)
  return _s;
}
inline const std::string& ClientRegistrationReq::_internal_sername() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sername_.Get();
}
inline void ClientRegistrationReq::_internal_set_sername(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sername_.Set(value, GetArena());
}
inline std::string* ClientRegistrationReq::_internal_mutable_sername() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.sername_.Mutable( GetArena());
}
inline std::string* ClientRegistrationReq::release_sername() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ClientRegistrationReq.sername)
  return _impl_.sername_.Release();
}
inline void ClientRegistrationReq::set_allocated_sername(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sername_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.sername_.IsDefault()) {
          _impl_.sername_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ClientRegistrationReq.sername)
}

// optional string phone_number = 4;
inline bool ClientRegistrationReq::has_phone_number() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ClientRegistrationReq::clear_phone_number() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.phone_number_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClientRegistrationReq::phone_number() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ClientRegistrationReq.phone_number)
  return _internal_phone_number();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ClientRegistrationReq::set_phone_number(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.phone_number_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ClientRegistrationReq.phone_number)
}
inline std::string* ClientRegistrationReq::mutable_phone_number() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_phone_number();
  // @@protoc_insertion_point(field_mutable:ClientRegistrationReq.phone_number)
  return _s;
}
inline const std::string& ClientRegistrationReq::_internal_phone_number() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.phone_number_.Get();
}
inline void ClientRegistrationReq::_internal_set_phone_number(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.phone_number_.Set(value, GetArena());
}
inline std::string* ClientRegistrationReq::_internal_mutable_phone_number() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.phone_number_.Mutable( GetArena());
}
inline std::string* ClientRegistrationReq::release_phone_number() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ClientRegistrationReq.phone_number)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.phone_number_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.phone_number_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void ClientRegistrationReq::set_allocated_phone_number(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.phone_number_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.phone_number_.IsDefault()) {
          _impl_.phone_number_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ClientRegistrationReq.phone_number)
}

// -------------------------------------------------------------------

// ClientRegistrationResp

// bool ok = 1;
inline void ClientRegistrationResp::clear_ok() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ok_ = false;
}
inline bool ClientRegistrationResp::ok() const {
  // @@protoc_insertion_point(field_get:ClientRegistrationResp.ok)
  return _internal_ok();
}
inline void ClientRegistrationResp::set_ok(bool value) {
  _internal_set_ok(value);
  // @@protoc_insertion_point(field_set:ClientRegistrationResp.ok)
}
inline bool ClientRegistrationResp::_internal_ok() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ok_;
}
inline void ClientRegistrationResp::_internal_set_ok(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ok_ = value;
}

// optional string reason = 2;
inline bool ClientRegistrationResp::has_reason() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ClientRegistrationResp::clear_reason() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.reason_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClientRegistrationResp::reason() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ClientRegistrationResp.reason)
  return _internal_reason();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ClientRegistrationResp::set_reason(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.reason_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ClientRegistrationResp.reason)
}
inline std::string* ClientRegistrationResp::mutable_reason() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_reason();
  // @@protoc_insertion_point(field_mutable:ClientRegistrationResp.reason)
  return _s;
}
inline const std::string& ClientRegistrationResp::_internal_reason() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.reason_.Get();
}
inline void ClientRegistrationResp::_internal_set_reason(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.reason_.Set(value, GetArena());
}
inline std::string* ClientRegistrationResp::_internal_mutable_reason() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.reason_.Mutable( GetArena());
}
inline std::string* ClientRegistrationResp::release_reason() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ClientRegistrationResp.reason)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.reason_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.reason_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void ClientRegistrationResp::set_allocated_reason(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.reason_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.reason_.IsDefault()) {
          _impl_.reason_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ClientRegistrationResp.reason)
}

// -------------------------------------------------------------------

// SubscriptionReq

// string subscriber_e_mail = 1;
inline void SubscriptionReq::clear_subscriber_e_mail() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.subscriber_e_mail_.ClearToEmpty();
}
inline const std::string& SubscriptionReq::subscriber_e_mail() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:SubscriptionReq.subscriber_e_mail)
  return _internal_subscriber_e_mail();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SubscriptionReq::set_subscriber_e_mail(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.subscriber_e_mail_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:SubscriptionReq.subscriber_e_mail)
}
inline std::string* SubscriptionReq::mutable_subscriber_e_mail() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_subscriber_e_mail();
  // @@protoc_insertion_point(field_mutable:SubscriptionReq.subscriber_e_mail)
  return _s;
}
inline const std::string& SubscriptionReq::_internal_subscriber_e_mail() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.subscriber_e_mail_.Get();
}
inline void SubscriptionReq::_internal_set_subscriber_e_mail(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.subscriber_e_mail_.Set(value, GetArena());
}
inline std::string* SubscriptionReq::_internal_mutable_subscriber_e_mail() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.subscriber_e_mail_.Mutable( GetArena());
}
inline std::string* SubscriptionReq::release_subscriber_e_mail() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:SubscriptionReq.subscriber_e_mail)
  return _impl_.subscriber_e_mail_.Release();
}
inline void SubscriptionReq::set_allocated_subscriber_e_mail(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.subscriber_e_mail_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.subscriber_e_mail_.IsDefault()) {
          _impl_.subscriber_e_mail_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SubscriptionReq.subscriber_e_mail)
}

// string subscription_e_mail = 2;
inline void SubscriptionReq::clear_subscription_e_mail() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.subscription_e_mail_.ClearToEmpty();
}
inline const std::string& SubscriptionReq::subscription_e_mail() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:SubscriptionReq.subscription_e_mail)
  return _internal_subscription_e_mail();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SubscriptionReq::set_subscription_e_mail(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.subscription_e_mail_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:SubscriptionReq.subscription_e_mail)
}
inline std::string* SubscriptionReq::mutable_subscription_e_mail() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_subscription_e_mail();
  // @@protoc_insertion_point(field_mutable:SubscriptionReq.subscription_e_mail)
  return _s;
}
inline const std::string& SubscriptionReq::_internal_subscription_e_mail() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.subscription_e_mail_.Get();
}
inline void SubscriptionReq::_internal_set_subscription_e_mail(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.subscription_e_mail_.Set(value, GetArena());
}
inline std::string* SubscriptionReq::_internal_mutable_subscription_e_mail() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.subscription_e_mail_.Mutable( GetArena());
}
inline std::string* SubscriptionReq::release_subscription_e_mail() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:SubscriptionReq.subscription_e_mail)
  return _impl_.subscription_e_mail_.Release();
}
inline void SubscriptionReq::set_allocated_subscription_e_mail(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.subscription_e_mail_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.subscription_e_mail_.IsDefault()) {
          _impl_.subscription_e_mail_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SubscriptionReq.subscription_e_mail)
}

// -------------------------------------------------------------------

// SubscriptionResp

// bool ok = 1;
inline void SubscriptionResp::clear_ok() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ok_ = false;
}
inline bool SubscriptionResp::ok() const {
  // @@protoc_insertion_point(field_get:SubscriptionResp.ok)
  return _internal_ok();
}
inline void SubscriptionResp::set_ok(bool value) {
  _internal_set_ok(value);
  // @@protoc_insertion_point(field_set:SubscriptionResp.ok)
}
inline bool SubscriptionResp::_internal_ok() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ok_;
}
inline void SubscriptionResp::_internal_set_ok(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ok_ = value;
}

// optional string reason = 2;
inline bool SubscriptionResp::has_reason() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SubscriptionResp::clear_reason() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.reason_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SubscriptionResp::reason() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:SubscriptionResp.reason)
  return _internal_reason();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SubscriptionResp::set_reason(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.reason_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:SubscriptionResp.reason)
}
inline std::string* SubscriptionResp::mutable_reason() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_reason();
  // @@protoc_insertion_point(field_mutable:SubscriptionResp.reason)
  return _s;
}
inline const std::string& SubscriptionResp::_internal_reason() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.reason_.Get();
}
inline void SubscriptionResp::_internal_set_reason(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.reason_.Set(value, GetArena());
}
inline std::string* SubscriptionResp::_internal_mutable_reason() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.reason_.Mutable( GetArena());
}
inline std::string* SubscriptionResp::release_reason() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:SubscriptionResp.reason)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.reason_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.reason_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SubscriptionResp::set_allocated_reason(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.reason_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.reason_.IsDefault()) {
          _impl_.reason_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SubscriptionResp.reason)
}

// -------------------------------------------------------------------

// EstimationReq

// string e_mail = 1;
inline void EstimationReq::clear_e_mail() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.e_mail_.ClearToEmpty();
}
inline const std::string& EstimationReq::e_mail() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:EstimationReq.e_mail)
  return _internal_e_mail();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EstimationReq::set_e_mail(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.e_mail_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:EstimationReq.e_mail)
}
inline std::string* EstimationReq::mutable_e_mail() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_e_mail();
  // @@protoc_insertion_point(field_mutable:EstimationReq.e_mail)
  return _s;
}
inline const std::string& EstimationReq::_internal_e_mail() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.e_mail_.Get();
}
inline void EstimationReq::_internal_set_e_mail(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.e_mail_.Set(value, GetArena());
}
inline std::string* EstimationReq::_internal_mutable_e_mail() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.e_mail_.Mutable( GetArena());
}
inline std::string* EstimationReq::release_e_mail() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:EstimationReq.e_mail)
  return _impl_.e_mail_.Release();
}
inline void EstimationReq::set_allocated_e_mail(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.e_mail_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.e_mail_.IsDefault()) {
          _impl_.e_mail_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:EstimationReq.e_mail)
}

// .EstablishmentData establishment = 2;
inline bool EstimationReq::has_establishment() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.establishment_ != nullptr);
  return value;
}
inline void EstimationReq::clear_establishment() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.establishment_ != nullptr) _impl_.establishment_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::EstablishmentData& EstimationReq::_internal_establishment() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::EstablishmentData* p = _impl_.establishment_;
  return p != nullptr ? *p : reinterpret_cast<const ::EstablishmentData&>(::_EstablishmentData_default_instance_);
}
inline const ::EstablishmentData& EstimationReq::establishment() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:EstimationReq.establishment)
  return _internal_establishment();
}
inline void EstimationReq::unsafe_arena_set_allocated_establishment(::EstablishmentData* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.establishment_);
  }
  _impl_.establishment_ = reinterpret_cast<::EstablishmentData*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:EstimationReq.establishment)
}
inline ::EstablishmentData* EstimationReq::release_establishment() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::EstablishmentData* released = _impl_.establishment_;
  _impl_.establishment_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::EstablishmentData* EstimationReq::unsafe_arena_release_establishment() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:EstimationReq.establishment)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::EstablishmentData* temp = _impl_.establishment_;
  _impl_.establishment_ = nullptr;
  return temp;
}
inline ::EstablishmentData* EstimationReq::_internal_mutable_establishment() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.establishment_ == nullptr) {
    auto* p = CreateMaybeMessage<::EstablishmentData>(GetArena());
    _impl_.establishment_ = reinterpret_cast<::EstablishmentData*>(p);
  }
  return _impl_.establishment_;
}
inline ::EstablishmentData* EstimationReq::mutable_establishment() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::EstablishmentData* _msg = _internal_mutable_establishment();
  // @@protoc_insertion_point(field_mutable:EstimationReq.establishment)
  return _msg;
}
inline void EstimationReq::set_allocated_establishment(::EstablishmentData* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::EstablishmentData*>(_impl_.establishment_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::EstablishmentData*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.establishment_ = reinterpret_cast<::EstablishmentData*>(value);
  // @@protoc_insertion_point(field_set_allocated:EstimationReq.establishment)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// EstablishmentData

// string name = 1;
inline void EstablishmentData::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& EstablishmentData::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:EstablishmentData.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EstablishmentData::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:EstablishmentData.name)
}
inline std::string* EstablishmentData::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:EstablishmentData.name)
  return _s;
}
inline const std::string& EstablishmentData::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void EstablishmentData::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* EstablishmentData::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* EstablishmentData::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:EstablishmentData.name)
  return _impl_.name_.Release();
}
inline void EstablishmentData::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:EstablishmentData.name)
}

// string address = 2;
inline void EstablishmentData::clear_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.address_.ClearToEmpty();
}
inline const std::string& EstablishmentData::address() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:EstablishmentData.address)
  return _internal_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EstablishmentData::set_address(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.address_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:EstablishmentData.address)
}
inline std::string* EstablishmentData::mutable_address() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:EstablishmentData.address)
  return _s;
}
inline const std::string& EstablishmentData::_internal_address() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.address_.Get();
}
inline void EstablishmentData::_internal_set_address(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.address_.Set(value, GetArena());
}
inline std::string* EstablishmentData::_internal_mutable_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.address_.Mutable( GetArena());
}
inline std::string* EstablishmentData::release_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:EstablishmentData.address)
  return _impl_.address_.Release();
}
inline void EstablishmentData::set_allocated_address(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.address_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.address_.IsDefault()) {
          _impl_.address_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:EstablishmentData.address)
}

// map<string, int32> dishes = 3;
inline int EstablishmentData::_internal_dishes_size() const {
  return _internal_dishes().size();
}
inline int EstablishmentData::dishes_size() const {
  return _internal_dishes_size();
}
inline void EstablishmentData::clear_dishes() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.dishes_.Clear();
}
inline const ::google::protobuf::Map<std::string, ::int32_t>& EstablishmentData::_internal_dishes() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.dishes_.GetMap();
}
inline const ::google::protobuf::Map<std::string, ::int32_t>& EstablishmentData::dishes() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:EstablishmentData.dishes)
  return _internal_dishes();
}
inline ::google::protobuf::Map<std::string, ::int32_t>* EstablishmentData::_internal_mutable_dishes() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.dishes_.MutableMap();
}
inline ::google::protobuf::Map<std::string, ::int32_t>* EstablishmentData::mutable_dishes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:EstablishmentData.dishes)
  return _internal_mutable_dishes();
}

// -------------------------------------------------------------------

// EstimatonResp

// bool ok = 1;
inline void EstimatonResp::clear_ok() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ok_ = false;
}
inline bool EstimatonResp::ok() const {
  // @@protoc_insertion_point(field_get:EstimatonResp.ok)
  return _internal_ok();
}
inline void EstimatonResp::set_ok(bool value) {
  _internal_set_ok(value);
  // @@protoc_insertion_point(field_set:EstimatonResp.ok)
}
inline bool EstimatonResp::_internal_ok() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ok_;
}
inline void EstimatonResp::_internal_set_ok(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ok_ = value;
}

// optional string reason = 2;
inline bool EstimatonResp::has_reason() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EstimatonResp::clear_reason() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.reason_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& EstimatonResp::reason() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:EstimatonResp.reason)
  return _internal_reason();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EstimatonResp::set_reason(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.reason_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:EstimatonResp.reason)
}
inline std::string* EstimatonResp::mutable_reason() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_reason();
  // @@protoc_insertion_point(field_mutable:EstimatonResp.reason)
  return _s;
}
inline const std::string& EstimatonResp::_internal_reason() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.reason_.Get();
}
inline void EstimatonResp::_internal_set_reason(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.reason_.Set(value, GetArena());
}
inline std::string* EstimatonResp::_internal_mutable_reason() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.reason_.Mutable( GetArena());
}
inline std::string* EstimatonResp::release_reason() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:EstimatonResp.reason)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.reason_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.reason_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void EstimatonResp::set_allocated_reason(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.reason_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.reason_.IsDefault()) {
          _impl_.reason_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:EstimatonResp.reason)
}

// -------------------------------------------------------------------

// SubscriptionEstimationsReq

// string subscribtion_mail = 1;
inline void SubscriptionEstimationsReq::clear_subscribtion_mail() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.subscribtion_mail_.ClearToEmpty();
}
inline const std::string& SubscriptionEstimationsReq::subscribtion_mail() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:SubscriptionEstimationsReq.subscribtion_mail)
  return _internal_subscribtion_mail();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SubscriptionEstimationsReq::set_subscribtion_mail(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.subscribtion_mail_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:SubscriptionEstimationsReq.subscribtion_mail)
}
inline std::string* SubscriptionEstimationsReq::mutable_subscribtion_mail() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_subscribtion_mail();
  // @@protoc_insertion_point(field_mutable:SubscriptionEstimationsReq.subscribtion_mail)
  return _s;
}
inline const std::string& SubscriptionEstimationsReq::_internal_subscribtion_mail() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.subscribtion_mail_.Get();
}
inline void SubscriptionEstimationsReq::_internal_set_subscribtion_mail(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.subscribtion_mail_.Set(value, GetArena());
}
inline std::string* SubscriptionEstimationsReq::_internal_mutable_subscribtion_mail() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.subscribtion_mail_.Mutable( GetArena());
}
inline std::string* SubscriptionEstimationsReq::release_subscribtion_mail() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:SubscriptionEstimationsReq.subscribtion_mail)
  return _impl_.subscribtion_mail_.Release();
}
inline void SubscriptionEstimationsReq::set_allocated_subscribtion_mail(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.subscribtion_mail_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.subscribtion_mail_.IsDefault()) {
          _impl_.subscribtion_mail_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SubscriptionEstimationsReq.subscribtion_mail)
}

// -------------------------------------------------------------------

// SubscriptionEstimationsResp

// bool ok = 1;
inline void SubscriptionEstimationsResp::clear_ok() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ok_ = false;
}
inline bool SubscriptionEstimationsResp::ok() const {
  // @@protoc_insertion_point(field_get:SubscriptionEstimationsResp.ok)
  return _internal_ok();
}
inline void SubscriptionEstimationsResp::set_ok(bool value) {
  _internal_set_ok(value);
  // @@protoc_insertion_point(field_set:SubscriptionEstimationsResp.ok)
}
inline bool SubscriptionEstimationsResp::_internal_ok() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ok_;
}
inline void SubscriptionEstimationsResp::_internal_set_ok(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ok_ = value;
}

// optional string reason = 2;
inline bool SubscriptionEstimationsResp::has_reason() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SubscriptionEstimationsResp::clear_reason() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.reason_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SubscriptionEstimationsResp::reason() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:SubscriptionEstimationsResp.reason)
  return _internal_reason();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SubscriptionEstimationsResp::set_reason(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.reason_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:SubscriptionEstimationsResp.reason)
}
inline std::string* SubscriptionEstimationsResp::mutable_reason() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_reason();
  // @@protoc_insertion_point(field_mutable:SubscriptionEstimationsResp.reason)
  return _s;
}
inline const std::string& SubscriptionEstimationsResp::_internal_reason() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.reason_.Get();
}
inline void SubscriptionEstimationsResp::_internal_set_reason(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.reason_.Set(value, GetArena());
}
inline std::string* SubscriptionEstimationsResp::_internal_mutable_reason() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.reason_.Mutable( GetArena());
}
inline std::string* SubscriptionEstimationsResp::release_reason() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:SubscriptionEstimationsResp.reason)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.reason_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.reason_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SubscriptionEstimationsResp::set_allocated_reason(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.reason_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.reason_.IsDefault()) {
          _impl_.reason_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SubscriptionEstimationsResp.reason)
}

// repeated .EstablishmentData estimations = 3;
inline int SubscriptionEstimationsResp::_internal_estimations_size() const {
  return _internal_estimations().size();
}
inline int SubscriptionEstimationsResp::estimations_size() const {
  return _internal_estimations_size();
}
inline void SubscriptionEstimationsResp::clear_estimations() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.estimations_.Clear();
}
inline ::EstablishmentData* SubscriptionEstimationsResp::mutable_estimations(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:SubscriptionEstimationsResp.estimations)
  return _internal_mutable_estimations()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::EstablishmentData>* SubscriptionEstimationsResp::mutable_estimations()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:SubscriptionEstimationsResp.estimations)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_estimations();
}
inline const ::EstablishmentData& SubscriptionEstimationsResp::estimations(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:SubscriptionEstimationsResp.estimations)
  return _internal_estimations().Get(index);
}
inline ::EstablishmentData* SubscriptionEstimationsResp::add_estimations() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::EstablishmentData* _add = _internal_mutable_estimations()->Add();
  // @@protoc_insertion_point(field_add:SubscriptionEstimationsResp.estimations)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::EstablishmentData>& SubscriptionEstimationsResp::estimations() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:SubscriptionEstimationsResp.estimations)
  return _internal_estimations();
}
inline const ::google::protobuf::RepeatedPtrField<::EstablishmentData>&
SubscriptionEstimationsResp::_internal_estimations() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.estimations_;
}
inline ::google::protobuf::RepeatedPtrField<::EstablishmentData>*
SubscriptionEstimationsResp::_internal_mutable_estimations() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.estimations_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_main_2eproto_2epb_2eh
