// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: main.proto
#ifndef GRPC_main_2eproto__INCLUDED
#define GRPC_main_2eproto__INCLUDED

#include "main.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

class GrpcTransport final {
 public:
  static constexpr char const* service_full_name() {
    return "GrpcTransport";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Registrate new user
    virtual ::grpc::Status Registrate(::grpc::ClientContext* context, const ::ClientRegistrationReq& request, ::ClientRegistrationResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ClientRegistrationResp>> AsyncRegistrate(::grpc::ClientContext* context, const ::ClientRegistrationReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ClientRegistrationResp>>(AsyncRegistrateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ClientRegistrationResp>> PrepareAsyncRegistrate(::grpc::ClientContext* context, const ::ClientRegistrationReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ClientRegistrationResp>>(PrepareAsyncRegistrateRaw(context, request, cq));
    }
    // Subscribe to user
    virtual ::grpc::Status Subscribe(::grpc::ClientContext* context, const ::SubscriptionReq& request, ::SubscriptionResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SubscriptionResp>> AsyncSubscribe(::grpc::ClientContext* context, const ::SubscriptionReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SubscriptionResp>>(AsyncSubscribeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SubscriptionResp>> PrepareAsyncSubscribe(::grpc::ClientContext* context, const ::SubscriptionReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SubscriptionResp>>(PrepareAsyncSubscribeRaw(context, request, cq));
    }
    // Estimate dishes
    virtual ::grpc::Status EstimateEstablishment(::grpc::ClientContext* context, const ::EstimationReq& request, ::EstimatonResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::EstimatonResp>> AsyncEstimateEstablishment(::grpc::ClientContext* context, const ::EstimationReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::EstimatonResp>>(AsyncEstimateEstablishmentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::EstimatonResp>> PrepareAsyncEstimateEstablishment(::grpc::ClientContext* context, const ::EstimationReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::EstimatonResp>>(PrepareAsyncEstimateEstablishmentRaw(context, request, cq));
    }
    // Subscription estimations
    virtual ::grpc::Status GetSubscriptionEstimations(::grpc::ClientContext* context, const ::SubscriptionEstimationsReq& request, ::SubscriptionEstimationsResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SubscriptionEstimationsResp>> AsyncGetSubscriptionEstimations(::grpc::ClientContext* context, const ::SubscriptionEstimationsReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SubscriptionEstimationsResp>>(AsyncGetSubscriptionEstimationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SubscriptionEstimationsResp>> PrepareAsyncGetSubscriptionEstimations(::grpc::ClientContext* context, const ::SubscriptionEstimationsReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SubscriptionEstimationsResp>>(PrepareAsyncGetSubscriptionEstimationsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Registrate new user
      virtual void Registrate(::grpc::ClientContext* context, const ::ClientRegistrationReq* request, ::ClientRegistrationResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Registrate(::grpc::ClientContext* context, const ::ClientRegistrationReq* request, ::ClientRegistrationResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Subscribe to user
      virtual void Subscribe(::grpc::ClientContext* context, const ::SubscriptionReq* request, ::SubscriptionResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Subscribe(::grpc::ClientContext* context, const ::SubscriptionReq* request, ::SubscriptionResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Estimate dishes
      virtual void EstimateEstablishment(::grpc::ClientContext* context, const ::EstimationReq* request, ::EstimatonResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void EstimateEstablishment(::grpc::ClientContext* context, const ::EstimationReq* request, ::EstimatonResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Subscription estimations
      virtual void GetSubscriptionEstimations(::grpc::ClientContext* context, const ::SubscriptionEstimationsReq* request, ::SubscriptionEstimationsResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetSubscriptionEstimations(::grpc::ClientContext* context, const ::SubscriptionEstimationsReq* request, ::SubscriptionEstimationsResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ClientRegistrationResp>* AsyncRegistrateRaw(::grpc::ClientContext* context, const ::ClientRegistrationReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ClientRegistrationResp>* PrepareAsyncRegistrateRaw(::grpc::ClientContext* context, const ::ClientRegistrationReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SubscriptionResp>* AsyncSubscribeRaw(::grpc::ClientContext* context, const ::SubscriptionReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SubscriptionResp>* PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, const ::SubscriptionReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::EstimatonResp>* AsyncEstimateEstablishmentRaw(::grpc::ClientContext* context, const ::EstimationReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::EstimatonResp>* PrepareAsyncEstimateEstablishmentRaw(::grpc::ClientContext* context, const ::EstimationReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SubscriptionEstimationsResp>* AsyncGetSubscriptionEstimationsRaw(::grpc::ClientContext* context, const ::SubscriptionEstimationsReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SubscriptionEstimationsResp>* PrepareAsyncGetSubscriptionEstimationsRaw(::grpc::ClientContext* context, const ::SubscriptionEstimationsReq& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Registrate(::grpc::ClientContext* context, const ::ClientRegistrationReq& request, ::ClientRegistrationResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ClientRegistrationResp>> AsyncRegistrate(::grpc::ClientContext* context, const ::ClientRegistrationReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ClientRegistrationResp>>(AsyncRegistrateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ClientRegistrationResp>> PrepareAsyncRegistrate(::grpc::ClientContext* context, const ::ClientRegistrationReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ClientRegistrationResp>>(PrepareAsyncRegistrateRaw(context, request, cq));
    }
    ::grpc::Status Subscribe(::grpc::ClientContext* context, const ::SubscriptionReq& request, ::SubscriptionResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SubscriptionResp>> AsyncSubscribe(::grpc::ClientContext* context, const ::SubscriptionReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SubscriptionResp>>(AsyncSubscribeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SubscriptionResp>> PrepareAsyncSubscribe(::grpc::ClientContext* context, const ::SubscriptionReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SubscriptionResp>>(PrepareAsyncSubscribeRaw(context, request, cq));
    }
    ::grpc::Status EstimateEstablishment(::grpc::ClientContext* context, const ::EstimationReq& request, ::EstimatonResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::EstimatonResp>> AsyncEstimateEstablishment(::grpc::ClientContext* context, const ::EstimationReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::EstimatonResp>>(AsyncEstimateEstablishmentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::EstimatonResp>> PrepareAsyncEstimateEstablishment(::grpc::ClientContext* context, const ::EstimationReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::EstimatonResp>>(PrepareAsyncEstimateEstablishmentRaw(context, request, cq));
    }
    ::grpc::Status GetSubscriptionEstimations(::grpc::ClientContext* context, const ::SubscriptionEstimationsReq& request, ::SubscriptionEstimationsResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SubscriptionEstimationsResp>> AsyncGetSubscriptionEstimations(::grpc::ClientContext* context, const ::SubscriptionEstimationsReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SubscriptionEstimationsResp>>(AsyncGetSubscriptionEstimationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SubscriptionEstimationsResp>> PrepareAsyncGetSubscriptionEstimations(::grpc::ClientContext* context, const ::SubscriptionEstimationsReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SubscriptionEstimationsResp>>(PrepareAsyncGetSubscriptionEstimationsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Registrate(::grpc::ClientContext* context, const ::ClientRegistrationReq* request, ::ClientRegistrationResp* response, std::function<void(::grpc::Status)>) override;
      void Registrate(::grpc::ClientContext* context, const ::ClientRegistrationReq* request, ::ClientRegistrationResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Subscribe(::grpc::ClientContext* context, const ::SubscriptionReq* request, ::SubscriptionResp* response, std::function<void(::grpc::Status)>) override;
      void Subscribe(::grpc::ClientContext* context, const ::SubscriptionReq* request, ::SubscriptionResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      void EstimateEstablishment(::grpc::ClientContext* context, const ::EstimationReq* request, ::EstimatonResp* response, std::function<void(::grpc::Status)>) override;
      void EstimateEstablishment(::grpc::ClientContext* context, const ::EstimationReq* request, ::EstimatonResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetSubscriptionEstimations(::grpc::ClientContext* context, const ::SubscriptionEstimationsReq* request, ::SubscriptionEstimationsResp* response, std::function<void(::grpc::Status)>) override;
      void GetSubscriptionEstimations(::grpc::ClientContext* context, const ::SubscriptionEstimationsReq* request, ::SubscriptionEstimationsResp* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::ClientRegistrationResp>* AsyncRegistrateRaw(::grpc::ClientContext* context, const ::ClientRegistrationReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ClientRegistrationResp>* PrepareAsyncRegistrateRaw(::grpc::ClientContext* context, const ::ClientRegistrationReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SubscriptionResp>* AsyncSubscribeRaw(::grpc::ClientContext* context, const ::SubscriptionReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SubscriptionResp>* PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, const ::SubscriptionReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::EstimatonResp>* AsyncEstimateEstablishmentRaw(::grpc::ClientContext* context, const ::EstimationReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::EstimatonResp>* PrepareAsyncEstimateEstablishmentRaw(::grpc::ClientContext* context, const ::EstimationReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SubscriptionEstimationsResp>* AsyncGetSubscriptionEstimationsRaw(::grpc::ClientContext* context, const ::SubscriptionEstimationsReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SubscriptionEstimationsResp>* PrepareAsyncGetSubscriptionEstimationsRaw(::grpc::ClientContext* context, const ::SubscriptionEstimationsReq& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Registrate_;
    const ::grpc::internal::RpcMethod rpcmethod_Subscribe_;
    const ::grpc::internal::RpcMethod rpcmethod_EstimateEstablishment_;
    const ::grpc::internal::RpcMethod rpcmethod_GetSubscriptionEstimations_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Registrate new user
    virtual ::grpc::Status Registrate(::grpc::ServerContext* context, const ::ClientRegistrationReq* request, ::ClientRegistrationResp* response);
    // Subscribe to user
    virtual ::grpc::Status Subscribe(::grpc::ServerContext* context, const ::SubscriptionReq* request, ::SubscriptionResp* response);
    // Estimate dishes
    virtual ::grpc::Status EstimateEstablishment(::grpc::ServerContext* context, const ::EstimationReq* request, ::EstimatonResp* response);
    // Subscription estimations
    virtual ::grpc::Status GetSubscriptionEstimations(::grpc::ServerContext* context, const ::SubscriptionEstimationsReq* request, ::SubscriptionEstimationsResp* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Registrate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Registrate() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Registrate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Registrate(::grpc::ServerContext* /*context*/, const ::ClientRegistrationReq* /*request*/, ::ClientRegistrationResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegistrate(::grpc::ServerContext* context, ::ClientRegistrationReq* request, ::grpc::ServerAsyncResponseWriter< ::ClientRegistrationResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Subscribe() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::SubscriptionReq* /*request*/, ::SubscriptionResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribe(::grpc::ServerContext* context, ::SubscriptionReq* request, ::grpc::ServerAsyncResponseWriter< ::SubscriptionResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_EstimateEstablishment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_EstimateEstablishment() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_EstimateEstablishment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EstimateEstablishment(::grpc::ServerContext* /*context*/, const ::EstimationReq* /*request*/, ::EstimatonResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEstimateEstablishment(::grpc::ServerContext* context, ::EstimationReq* request, ::grpc::ServerAsyncResponseWriter< ::EstimatonResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSubscriptionEstimations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetSubscriptionEstimations() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetSubscriptionEstimations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSubscriptionEstimations(::grpc::ServerContext* /*context*/, const ::SubscriptionEstimationsReq* /*request*/, ::SubscriptionEstimationsResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSubscriptionEstimations(::grpc::ServerContext* context, ::SubscriptionEstimationsReq* request, ::grpc::ServerAsyncResponseWriter< ::SubscriptionEstimationsResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Registrate<WithAsyncMethod_Subscribe<WithAsyncMethod_EstimateEstablishment<WithAsyncMethod_GetSubscriptionEstimations<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Registrate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Registrate() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::ClientRegistrationReq, ::ClientRegistrationResp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ClientRegistrationReq* request, ::ClientRegistrationResp* response) { return this->Registrate(context, request, response); }));}
    void SetMessageAllocatorFor_Registrate(
        ::grpc::MessageAllocator< ::ClientRegistrationReq, ::ClientRegistrationResp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ClientRegistrationReq, ::ClientRegistrationResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Registrate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Registrate(::grpc::ServerContext* /*context*/, const ::ClientRegistrationReq* /*request*/, ::ClientRegistrationResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Registrate(
      ::grpc::CallbackServerContext* /*context*/, const ::ClientRegistrationReq* /*request*/, ::ClientRegistrationResp* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Subscribe() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::SubscriptionReq, ::SubscriptionResp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::SubscriptionReq* request, ::SubscriptionResp* response) { return this->Subscribe(context, request, response); }));}
    void SetMessageAllocatorFor_Subscribe(
        ::grpc::MessageAllocator< ::SubscriptionReq, ::SubscriptionResp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::SubscriptionReq, ::SubscriptionResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::SubscriptionReq* /*request*/, ::SubscriptionResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Subscribe(
      ::grpc::CallbackServerContext* /*context*/, const ::SubscriptionReq* /*request*/, ::SubscriptionResp* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_EstimateEstablishment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_EstimateEstablishment() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::EstimationReq, ::EstimatonResp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::EstimationReq* request, ::EstimatonResp* response) { return this->EstimateEstablishment(context, request, response); }));}
    void SetMessageAllocatorFor_EstimateEstablishment(
        ::grpc::MessageAllocator< ::EstimationReq, ::EstimatonResp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::EstimationReq, ::EstimatonResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_EstimateEstablishment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EstimateEstablishment(::grpc::ServerContext* /*context*/, const ::EstimationReq* /*request*/, ::EstimatonResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EstimateEstablishment(
      ::grpc::CallbackServerContext* /*context*/, const ::EstimationReq* /*request*/, ::EstimatonResp* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetSubscriptionEstimations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetSubscriptionEstimations() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::SubscriptionEstimationsReq, ::SubscriptionEstimationsResp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::SubscriptionEstimationsReq* request, ::SubscriptionEstimationsResp* response) { return this->GetSubscriptionEstimations(context, request, response); }));}
    void SetMessageAllocatorFor_GetSubscriptionEstimations(
        ::grpc::MessageAllocator< ::SubscriptionEstimationsReq, ::SubscriptionEstimationsResp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::SubscriptionEstimationsReq, ::SubscriptionEstimationsResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetSubscriptionEstimations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSubscriptionEstimations(::grpc::ServerContext* /*context*/, const ::SubscriptionEstimationsReq* /*request*/, ::SubscriptionEstimationsResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSubscriptionEstimations(
      ::grpc::CallbackServerContext* /*context*/, const ::SubscriptionEstimationsReq* /*request*/, ::SubscriptionEstimationsResp* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Registrate<WithCallbackMethod_Subscribe<WithCallbackMethod_EstimateEstablishment<WithCallbackMethod_GetSubscriptionEstimations<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Registrate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Registrate() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Registrate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Registrate(::grpc::ServerContext* /*context*/, const ::ClientRegistrationReq* /*request*/, ::ClientRegistrationResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Subscribe() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::SubscriptionReq* /*request*/, ::SubscriptionResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_EstimateEstablishment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_EstimateEstablishment() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_EstimateEstablishment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EstimateEstablishment(::grpc::ServerContext* /*context*/, const ::EstimationReq* /*request*/, ::EstimatonResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSubscriptionEstimations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetSubscriptionEstimations() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetSubscriptionEstimations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSubscriptionEstimations(::grpc::ServerContext* /*context*/, const ::SubscriptionEstimationsReq* /*request*/, ::SubscriptionEstimationsResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Registrate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Registrate() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Registrate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Registrate(::grpc::ServerContext* /*context*/, const ::ClientRegistrationReq* /*request*/, ::ClientRegistrationResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegistrate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Subscribe() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::SubscriptionReq* /*request*/, ::SubscriptionResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribe(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_EstimateEstablishment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_EstimateEstablishment() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_EstimateEstablishment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EstimateEstablishment(::grpc::ServerContext* /*context*/, const ::EstimationReq* /*request*/, ::EstimatonResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEstimateEstablishment(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetSubscriptionEstimations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetSubscriptionEstimations() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetSubscriptionEstimations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSubscriptionEstimations(::grpc::ServerContext* /*context*/, const ::SubscriptionEstimationsReq* /*request*/, ::SubscriptionEstimationsResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSubscriptionEstimations(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Registrate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Registrate() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Registrate(context, request, response); }));
    }
    ~WithRawCallbackMethod_Registrate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Registrate(::grpc::ServerContext* /*context*/, const ::ClientRegistrationReq* /*request*/, ::ClientRegistrationResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Registrate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Subscribe() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Subscribe(context, request, response); }));
    }
    ~WithRawCallbackMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::SubscriptionReq* /*request*/, ::SubscriptionResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Subscribe(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_EstimateEstablishment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_EstimateEstablishment() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->EstimateEstablishment(context, request, response); }));
    }
    ~WithRawCallbackMethod_EstimateEstablishment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EstimateEstablishment(::grpc::ServerContext* /*context*/, const ::EstimationReq* /*request*/, ::EstimatonResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EstimateEstablishment(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetSubscriptionEstimations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetSubscriptionEstimations() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetSubscriptionEstimations(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetSubscriptionEstimations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSubscriptionEstimations(::grpc::ServerContext* /*context*/, const ::SubscriptionEstimationsReq* /*request*/, ::SubscriptionEstimationsResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSubscriptionEstimations(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Registrate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Registrate() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ClientRegistrationReq, ::ClientRegistrationResp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ClientRegistrationReq, ::ClientRegistrationResp>* streamer) {
                       return this->StreamedRegistrate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Registrate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Registrate(::grpc::ServerContext* /*context*/, const ::ClientRegistrationReq* /*request*/, ::ClientRegistrationResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegistrate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ClientRegistrationReq,::ClientRegistrationResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Subscribe() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::SubscriptionReq, ::SubscriptionResp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::SubscriptionReq, ::SubscriptionResp>* streamer) {
                       return this->StreamedSubscribe(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::SubscriptionReq* /*request*/, ::SubscriptionResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSubscribe(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::SubscriptionReq,::SubscriptionResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_EstimateEstablishment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_EstimateEstablishment() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::EstimationReq, ::EstimatonResp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::EstimationReq, ::EstimatonResp>* streamer) {
                       return this->StreamedEstimateEstablishment(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_EstimateEstablishment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status EstimateEstablishment(::grpc::ServerContext* /*context*/, const ::EstimationReq* /*request*/, ::EstimatonResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEstimateEstablishment(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::EstimationReq,::EstimatonResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSubscriptionEstimations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetSubscriptionEstimations() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::SubscriptionEstimationsReq, ::SubscriptionEstimationsResp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::SubscriptionEstimationsReq, ::SubscriptionEstimationsResp>* streamer) {
                       return this->StreamedGetSubscriptionEstimations(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetSubscriptionEstimations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSubscriptionEstimations(::grpc::ServerContext* /*context*/, const ::SubscriptionEstimationsReq* /*request*/, ::SubscriptionEstimationsResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSubscriptionEstimations(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::SubscriptionEstimationsReq,::SubscriptionEstimationsResp>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Registrate<WithStreamedUnaryMethod_Subscribe<WithStreamedUnaryMethod_EstimateEstablishment<WithStreamedUnaryMethod_GetSubscriptionEstimations<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Registrate<WithStreamedUnaryMethod_Subscribe<WithStreamedUnaryMethod_EstimateEstablishment<WithStreamedUnaryMethod_GetSubscriptionEstimations<Service > > > > StreamedService;
};


#endif  // GRPC_main_2eproto__INCLUDED
